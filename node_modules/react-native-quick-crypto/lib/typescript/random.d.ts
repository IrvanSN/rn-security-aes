import { Buffer } from '@craftzdog/react-native-buffer';
declare type TypedArray = Uint8Array | Uint8ClampedArray | Uint16Array | Uint32Array | Int8Array | Int16Array | Int32Array | Float32Array | Float64Array;
declare type ArrayBufferView = TypedArray | DataView | ArrayBufferLike | Buffer;
export declare function randomFill<T extends ArrayBufferView>(buffer: T, callback: (err: Error | null, buf: T) => void): void;
export declare function randomFill<T extends ArrayBufferView>(buffer: T, offset: number, callback: (err: Error | null, buf: T) => void): void;
export declare function randomFill<T extends ArrayBufferView>(buffer: T, offset: number, size: number, callback: (err: Error | null, buf: T) => void): void;
export declare function randomFillSync<T extends ArrayBufferView>(buffer: T, offset?: number, size?: number): T;
export declare function randomBytes(size: number): ArrayBuffer;
export declare function randomBytes(size: number, callback: (err: Error | null, buf?: ArrayBuffer) => void): void;
export declare const rng: typeof randomBytes;
export declare const pseudoRandomBytes: typeof randomBytes;
export declare const prng: typeof randomBytes;
declare type RandomIntCallback = (err: Error | null, value: number) => void;
export declare function randomInt(max: number, callback: RandomIntCallback): void;
export declare function randomInt(max: number): number;
export declare function randomInt(min: number, max: number, callback: RandomIntCallback): void;
export declare function randomInt(min: number, max: number): number;
declare type DataType = Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array;
export declare function getRandomValues(data: DataType): DataType;
export declare function randomUUID(): string;
export {};
