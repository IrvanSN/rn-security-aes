{"version":3,"sources":["NativeQuickCrypto.ts"],"names":["global","__QuickCryptoProxy","QuickCryptoModule","NativeModules","QuickCrypto","message","Platform","OS","ExpoConstants","NativeUnimoduleProxy","modulesConstants","ExponentConstants","appOwnership","Error","nativeCallSyncHook","install","result","proxy","NativeQuickCrypto"],"mappings":";;;;;;;AAAA;;AAqCA;AACA,IAAIA,MAAM,CAACC,kBAAP,IAA6B,IAAjC,EAAuC;AACrC;AACA,QAAMC,iBAAiB,GAAGC,2BAAcC,WAAxC;;AACA,MAAIF,iBAAiB,IAAI,IAAzB,EAA+B;AAAA;;AAC7B,QAAIG,OAAO,GACT,kGADF;AAEAA,IAAAA,OAAO,IACL,2GADF;;AAEA,QAAIC,sBAASC,EAAT,KAAgB,KAAhB,IAAyBD,sBAASC,EAAT,KAAgB,OAA7C,EAAsD;AACpDF,MAAAA,OAAO,IAAI,4DAAX;AACD;;AACD,QAAIC,sBAASC,EAAT,KAAgB,SAApB,EAA+B;AAC7BF,MAAAA,OAAO,IAAI,iCAAX;AACD,KAV4B,CAW7B;;;AACA,UAAMG,aAAa,4BACjBL,2BAAcM,oBADG,oFACjB,sBAAoCC,gBADnB,2DACjB,uBAAsDC,iBADxD;;AAEA,QAAIH,aAAa,IAAI,IAArB,EAA2B;AACzB,UAAIA,aAAa,CAACI,YAAd,KAA+B,MAAnC,EAA2C;AACzC;AACA,cAAM,IAAIC,KAAJ,CACJ,uHADI,CAAN;AAGD,OALD,MAKO;AACL;AACAR,QAAAA,OAAO,IAAI,wCAAX;AACD;AACF;;AAEDA,IAAAA,OAAO,IAAI,oCAAX;AACA,UAAM,IAAIQ,KAAJ,CAAUR,OAAV,CAAN;AACD,GA/BoC,CAiCrC;;;AACA,MAAIL,MAAM,CAACc,kBAAP,IAA6B,IAA7B,IAAqCZ,iBAAiB,CAACa,OAAlB,IAA6B,IAAtE,EAA4E;AAC1E,UAAM,IAAIF,KAAJ,CACJ,oRADI,CAAN;AAGD,GAtCoC,CAwCrC;;;AACA,QAAMG,MAAM,GAAGd,iBAAiB,CAACa,OAAlB,EAAf;AACA,MAAIC,MAAM,KAAK,IAAf,EACE,MAAM,IAAIH,KAAJ,CACH,oKAAmKG,MAAO,EADvK,CAAN,CA3CmC,CA+CrC;;AACA,MAAIhB,MAAM,CAACC,kBAAP,IAA6B,IAAjC,EACE,MAAM,IAAIY,KAAJ,CACJ,4JADI,CAAN;AAGH;;AAED,MAAMI,KAAK,GAAGjB,MAAM,CAACC,kBAArB;AACO,MAAMiB,iBAAiB,GAAGD,KAA1B","sourcesContent":["import { NativeModules, Platform } from 'react-native';\nimport type { CreateHmacMethod } from './hmac';\nimport type { CreateHashMethod } from './hash';\nimport type { Pbkdf2Object } from './pbkdf2';\nimport type { RandomObject } from './random';\nimport type {\n  CreateCipherMethod,\n  CreateDecipherMethod,\n  PublicEncryptMethod,\n  PrivateDecryptMethod,\n  GenerateKeyPairMethod,\n  GenerateKeyPairSyncMethod,\n} from './Cipher';\nimport type { CreateSignMethod, CreateVerifyMethod } from './sig';\n\ninterface NativeQuickCryptoSpec {\n  createHmac: CreateHmacMethod;\n  pbkdf2: Pbkdf2Object;\n  random: RandomObject;\n  createHash: CreateHashMethod;\n  createCipher: CreateCipherMethod;\n  createDecipher: CreateDecipherMethod;\n  publicEncrypt: PublicEncryptMethod;\n  publicDecrypt: PublicEncryptMethod;\n  privateDecrypt: PrivateDecryptMethod;\n  generateKeyPair: GenerateKeyPairMethod;\n  generateKeyPairSync: GenerateKeyPairSyncMethod;\n  createSign: CreateSignMethod;\n  createVerify: CreateVerifyMethod;\n}\n\n// global func declaration for JSI functions\ndeclare global {\n  function nativeCallSyncHook(): unknown;\n  var __QuickCryptoProxy: object | undefined;\n}\n\n// Check if the constructor exists. If not, try installing the JSI bindings.\nif (global.__QuickCryptoProxy == null) {\n  // Get the native QuickCrypto ReactModule\n  const QuickCryptoModule = NativeModules.QuickCrypto;\n  if (QuickCryptoModule == null) {\n    let message =\n      'Failed to install react-native-quick-crypto: The native `QuickCrypto` Module could not be found.';\n    message +=\n      '\\n* Make sure react-native-quick-crypto is correctly autolinked (run `npx react-native config` to verify)';\n    if (Platform.OS === 'ios' || Platform.OS === 'macos') {\n      message += '\\n* Make sure you ran `pod install` in the ios/ directory.';\n    }\n    if (Platform.OS === 'android') {\n      message += '\\n* Make sure gradle is synced.';\n    }\n    // check if Expo\n    const ExpoConstants =\n      NativeModules.NativeUnimoduleProxy?.modulesConstants?.ExponentConstants;\n    if (ExpoConstants != null) {\n      if (ExpoConstants.appOwnership === 'expo') {\n        // We're running Expo Go\n        throw new Error(\n          'react-native-quick-crypto is not supported in Expo Go! Use EAS (`expo prebuild`) or eject to a bare workflow instead.'\n        );\n      } else {\n        // We're running Expo bare / standalone\n        message += '\\n* Make sure you ran `expo prebuild`.';\n      }\n    }\n\n    message += '\\n* Make sure you rebuilt the app.';\n    throw new Error(message);\n  }\n\n  // Check if we are running on-device (JSI)\n  if (global.nativeCallSyncHook == null || QuickCryptoModule.install == null) {\n    throw new Error(\n      'Failed to install react-native-quick-crypto: React Native is not running on-device. QuickCrypto can only be used when synchronous method invocations (JSI) are possible. If you are using a remote debugger (e.g. Chrome), switch to an on-device debugger (e.g. Flipper) instead.'\n    );\n  }\n\n  // Call the synchronous blocking install() function\n  const result = QuickCryptoModule.install();\n  if (result !== true)\n    throw new Error(\n      `Failed to install react-native-quick-crypto: The native QuickCrypto Module could not be installed! Looks like something went wrong when installing JSI bindings: ${result}`\n    );\n\n  // Check again if the constructor now exists. If not, throw an error.\n  if (global.__QuickCryptoProxy == null)\n    throw new Error(\n      'Failed to install react-native-quick-crypto, the native initializer function does not exist. Are you trying to use QuickCrypto from different JS Runtimes?'\n    );\n}\n\nconst proxy = global.__QuickCryptoProxy;\nexport const NativeQuickCrypto = proxy as any as NativeQuickCryptoSpec;\n"]}