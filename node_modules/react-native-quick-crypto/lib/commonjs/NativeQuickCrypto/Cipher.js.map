{"version":3,"sources":["Cipher.ts"],"names":["RSAKeyVariant"],"mappings":";;;;;;AAGA;AACA;IACYA,a;;;WAAAA,a;AAAAA,EAAAA,a,CAAAA,a;AAAAA,EAAAA,a,CAAAA,a;AAAAA,EAAAA,a,CAAAA,a;GAAAA,a,6BAAAA,a","sourcesContent":["import type { BinaryLike } from '../Utils';\nimport type { Buffer } from '@craftzdog/react-native-buffer';\n\n// TODO(osp) on node this is defined on the native side\n// Need to do the same so that values are always in sync\nexport enum RSAKeyVariant {\n  kKeyVariantRSA_SSA_PKCS1_v1_5,\n  kKeyVariantRSA_PSS,\n  kKeyVariantRSA_OAEP,\n}\n\nexport type InternalCipher = {\n  update: (data: BinaryLike | ArrayBufferView) => ArrayBuffer;\n  final: () => ArrayBuffer;\n  copy: () => void;\n  setAAD: (args: {\n    data: BinaryLike;\n    plaintextLength?: number;\n  }) => InternalCipher;\n  setAutoPadding: (autoPad: boolean) => boolean;\n  setAuthTag: (tag: ArrayBuffer) => boolean;\n};\n\nexport type CreateCipherMethod = (params: {\n  cipher_type: string;\n  cipher_key: ArrayBuffer;\n  auth_tag_len: number;\n}) => InternalCipher;\n\nexport type CreateDecipherMethod = (params: {\n  cipher_type: string;\n  cipher_key: ArrayBuffer;\n  auth_tag_len: number;\n}) => InternalCipher;\n\nexport type PublicEncryptMethod = (\n  data: ArrayBuffer,\n  format: number,\n  type: any,\n  passphrase: any,\n  buffer: ArrayBuffer,\n  padding: number,\n  oaepHash: any,\n  oaepLabel: any\n) => Buffer;\nexport type PrivateDecryptMethod = (\n  data: ArrayBuffer,\n  format: number,\n  type: any,\n  passphrase: any,\n  buffer: ArrayBuffer,\n  padding: number,\n  oaepHash: any,\n  oaepLabel: any\n) => Buffer;\n\nexport type GenerateKeyPairMethod = (\n  keyVariant: RSAKeyVariant,\n  modulusLength: number,\n  publicExponent: number,\n  ...rest: any[]\n) => Promise<[error: unknown, publicBuffer: any, privateBuffer: any]>;\n\nexport type GenerateKeyPairSyncMethod = (\n  keyVariant: RSAKeyVariant,\n  modulusLength: number,\n  publicExponent: number,\n  ...rest: any[]\n) => [error: unknown, publicBuffer: any, privateBuffer: any];\n"]}