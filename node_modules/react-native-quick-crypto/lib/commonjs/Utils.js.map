{"version":3,"sources":["Utils.ts"],"names":["defaultEncoding","setDefaultEncoding","encoding","getDefaultEncoding","kEmptyObject","Object","freeze","create","toArrayBuffer","buf","buffer","slice","byteOffset","byteLength","ab","ArrayBuffer","length","view","Uint8Array","i","binaryLikeToArrayBuffer","input","Buffer","from","isBuffer","ab2str","toString","validateString","str","name","isString","Error","validateFunction","f","isStringOrBuffer","val","isView","validateObject","value","options","useDefaultOptions","allowArray","allowFunction","nullable","Array","isArray","validateInt32","min","max","Number","isInteger","validateUint32","positive"],"mappings":"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","sourcesContent":["import { Buffer } from '@craftzdog/react-native-buffer';\n\nexport type BinaryLike = string | ArrayBuffer | Buffer;\n\nexport type BinaryToTextEncoding = 'base64' | 'base64url' | 'hex' | 'binary';\nexport type CharacterEncoding = 'utf8' | 'utf-8' | 'utf16le' | 'latin1';\nexport type LegacyCharacterEncoding = 'ascii' | 'binary' | 'ucs2' | 'ucs-2';\nexport type Encoding =\n  | BinaryToTextEncoding\n  | CharacterEncoding\n  | LegacyCharacterEncoding;\n\n// TODO(osp) should buffer be part of the Encoding type?\nexport type CipherEncoding = Encoding | 'buffer';\n\n// Mimics node behavior for default global encoding\nlet defaultEncoding: CipherEncoding = 'buffer';\n\nexport function setDefaultEncoding(encoding: CipherEncoding) {\n  defaultEncoding = encoding;\n}\n\nexport function getDefaultEncoding(): CipherEncoding {\n  return defaultEncoding;\n}\n\nexport const kEmptyObject = Object.freeze(Object.create(null));\n\n// Should be used by Cipher (or any other module that requires valid encodings)\n// function slowCases(enc: string) {\n//   switch (enc.length) {\n//     case 4:\n//       if (enc === 'UTF8') return 'utf8';\n//       if (enc === 'ucs2' || enc === 'UCS2') return 'utf16le';\n//       enc = `${enc}`.toLowerCase();\n//       if (enc === 'utf8') return 'utf8';\n//       if (enc === 'ucs2') return 'utf16le';\n//       break;\n//     case 3:\n//       if (enc === 'hex' || enc === 'HEX' || `${enc}`.toLowerCase() === 'hex')\n//         return 'hex';\n//       break;\n//     case 5:\n//       if (enc === 'ascii') return 'ascii';\n//       if (enc === 'ucs-2') return 'utf16le';\n//       if (enc === 'UTF-8') return 'utf8';\n//       if (enc === 'ASCII') return 'ascii';\n//       if (enc === 'UCS-2') return 'utf16le';\n//       enc = `${enc}`.toLowerCase();\n//       if (enc === 'utf-8') return 'utf8';\n//       if (enc === 'ascii') return 'ascii';\n//       if (enc === 'ucs-2') return 'utf16le';\n//       break;\n//     case 6:\n//       if (enc === 'base64') return 'base64';\n//       if (enc === 'latin1' || enc === 'binary') return 'latin1';\n//       if (enc === 'BASE64') return 'base64';\n//       if (enc === 'LATIN1' || enc === 'BINARY') return 'latin1';\n//       enc = `${enc}`.toLowerCase();\n//       if (enc === 'base64') return 'base64';\n//       if (enc === 'latin1' || enc === 'binary') return 'latin1';\n//       break;\n//     case 7:\n//       if (\n//         enc === 'utf16le' ||\n//         enc === 'UTF16LE' ||\n//         `${enc}`.toLowerCase() === 'utf16le'\n//       )\n//         return 'utf16le';\n//       break;\n//     case 8:\n//       if (\n//         enc === 'utf-16le' ||\n//         enc === 'UTF-16LE' ||\n//         `${enc}`.toLowerCase() === 'utf-16le'\n//       )\n//         return 'utf16le';\n//       break;\n//     case 9:\n//       if (\n//         enc === 'base64url' ||\n//         enc === 'BASE64URL' ||\n//         `${enc}`.toLowerCase() === 'base64url'\n//       )\n//         return 'base64url';\n//       break;\n//     default:\n//       if (enc === '') return 'utf8';\n//   }\n// }\n\n// // Return undefined if there is no match.\n// // Move the \"slow cases\" to a separate function to make sure this function gets\n// // inlined properly. That prioritizes the common case.\n// export function normalizeEncoding(enc?: string) {\n//   if (enc == null || enc === 'utf8' || enc === 'utf-8') return 'utf8';\n//   return slowCases(enc);\n// }\n\nexport function toArrayBuffer(buf: Buffer): ArrayBuffer {\n  if (buf?.buffer?.slice) {\n    return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);\n  }\n  const ab = new ArrayBuffer(buf.length);\n  const view = new Uint8Array(ab);\n  for (let i = 0; i < buf.length; ++i) {\n    view[i] = buf[i];\n  }\n  return ab;\n}\n\nexport function binaryLikeToArrayBuffer(\n  input: BinaryLike,\n  encoding: string = 'utf-8'\n): ArrayBuffer {\n  if (typeof input === 'string') {\n    const buffer = Buffer.from(input, encoding);\n\n    return buffer.buffer.slice(\n      buffer.byteOffset,\n      buffer.byteOffset + buffer.byteLength\n    );\n  }\n\n  if (Buffer.isBuffer(input)) {\n    return toArrayBuffer(input);\n  }\n\n  // TODO add further binary types to BinaryLike, UInt8Array and so for have this array as property\n  if ((input as any).buffer) {\n    return (input as any).buffer;\n  }\n\n  if (!(input instanceof ArrayBuffer)) {\n    try {\n      const buffer = Buffer.from(input);\n      return buffer.buffer.slice(\n        buffer.byteOffset,\n        buffer.byteOffset + buffer.byteLength\n      );\n    } catch {\n      throw 'error';\n    }\n  }\n  return input;\n}\n\nexport function ab2str(buf: ArrayBuffer, encoding: string = 'hex') {\n  return Buffer.from(buf).toString(encoding);\n}\n\nexport function validateString(str: any, name?: string): str is string {\n  const isString = typeof str === 'string';\n  if (isString) {\n    throw new Error(`${name} is not a string`);\n  }\n  return isString;\n}\n\nexport function validateFunction(f: any): f is Function {\n  return f != null && typeof f === 'function';\n}\n\nexport function isStringOrBuffer(val: any): val is string | ArrayBuffer {\n  return typeof val === 'string' || ArrayBuffer.isView(val);\n}\n\nexport function validateObject<T>(\n  value: any,\n  name: string,\n  options?: {\n    allowArray: boolean;\n    allowFunction: boolean;\n    nullable: boolean;\n  } | null\n): value is T {\n  const useDefaultOptions = options == null;\n  const allowArray = useDefaultOptions ? false : options.allowArray;\n  const allowFunction = useDefaultOptions ? false : options.allowFunction;\n  const nullable = useDefaultOptions ? false : options.nullable;\n  if (\n    (!nullable && value === null) ||\n    (!allowArray && Array.isArray(value)) ||\n    (typeof value !== 'object' &&\n      (!allowFunction || typeof value !== 'function'))\n  ) {\n    throw new Error(`${name} is not a valid object $${value}`);\n  }\n  return true;\n}\n\nexport function validateInt32(\n  value: any,\n  name: string,\n  min = -2147483648,\n  max = 2147483647\n) {\n  // The defaults for min and max correspond to the limits of 32-bit integers.\n  if (typeof value !== 'number') {\n    throw new Error(`Invalid argument - ${name} is not a number: ${value}`);\n  }\n  if (!Number.isInteger(value)) {\n    throw new Error(\n      `Argument out of range - ${name} out of integer range: ${value}`\n    );\n  }\n  if (value < min || value > max) {\n    throw new Error(\n      `Invalid argument - ${name} out of range >= ${min} && <= ${max}: ${value}`\n    );\n  }\n}\n\nexport function validateUint32(\n  value: number,\n  name: string,\n  positive?: boolean\n) {\n  if (typeof value !== 'number') {\n    // throw new ERR_INVALID_ARG_TYPE(name, 'number', value);\n    throw new Error(`Invalid argument - ${name} is not a number: ${value}`);\n  }\n  if (!Number.isInteger(value)) {\n    // throw new ERR_OUT_OF_RANGE(name, 'an integer', value);\n    throw new Error(\n      `Argument out of range - ${name} out of integer range: ${value}`\n    );\n  }\n  const min = positive ? 1 : 0;\n  // 2 ** 32 === 4294967296\n  const max = 4294967295;\n  if (value < min || value > max) {\n    // throw new ERR_OUT_OF_RANGE(name, `>= ${min} && <= ${max}`, value);\n    throw new Error(\n      `Invalid argument - ${name} out of range >= ${min} && <= ${max}: ${value}`\n    );\n  }\n}\n"]}