{"version":3,"sources":["pbkdf2.ts"],"names":["WRONG_PASS","WRON_SALT","sanitizeInput","input","errorMsg","e","nativePbkdf2","NativeQuickCrypto","pbkdf2","password","salt","iterations","keylen","arg0","arg1","digest","callback","undefined","Error","sanitizedPassword","sanitizedSalt","then","res","Buffer","from","pbkdf2Sync","algo","result"],"mappings":";;;;;;;;AAAA;;AACA;;AACA;;AAEA,MAAMA,UAAU,GACd,kEADF;AAEA,MAAMC,SAAS,GAAI,8DAAnB;;AAMA,SAASC,aAAT,CAAuBC,KAAvB,EAA0CC,QAA1C,EAAyE;AACvE,MAAI;AACF,WAAO,oCAAwBD,KAAxB,CAAP;AACD,GAFD,CAEE,OAAOE,CAAP,EAAe;AACf,UAAMD,QAAN;AACD;AACF;;AAED,MAAME,YAAY,GAAGC,qCAAkBC,MAAvC;;AAiBO,SAASA,MAAT,CACLC,QADK,EAELC,IAFK,EAGLC,UAHK,EAILC,MAJK,EAKLC,IALK,EAMLC,IANK,EAOC;AACN,MAAIC,MAAM,GAAG,MAAb;AACA,MAAIC,QAAJ;;AACA,MAAI,OAAOH,IAAP,KAAgB,QAApB,EAA8B;AAC5BE,IAAAA,MAAM,GAAGF,IAAT;;AACA,QAAI,OAAOC,IAAP,KAAgB,UAApB,EAAgC;AAC9BE,MAAAA,QAAQ,GAAGF,IAAX;AACD;AACF,GALD,MAKO;AACL,QAAI,OAAOD,IAAP,KAAgB,UAApB,EAAgC;AAC9BG,MAAAA,QAAQ,GAAGH,IAAX;AACD;AACF;;AACD,MAAIG,QAAQ,KAAKC,SAAjB,EAA4B;AAC1B,UAAM,IAAIC,KAAJ,CAAU,gCAAV,CAAN;AACD;;AAED,QAAMC,iBAAiB,GAAGjB,aAAa,CAACO,QAAD,EAAWT,UAAX,CAAvC;AACA,QAAMoB,aAAa,GAAGlB,aAAa,CAACQ,IAAD,EAAOT,SAAP,CAAnC;AAEAK,EAAAA,YAAY,CACTE,MADH,CACUW,iBADV,EAC6BC,aAD7B,EAC4CT,UAD5C,EACwDC,MADxD,EACgEG,MADhE,EAEGM,IAFH,CAGKC,GAAD,IAAsB;AACpBN,IAAAA,QAAQ,CAAE,IAAF,EAAQO,0BAAOC,IAAP,CAAYF,GAAZ,CAAR,CAAR;AACD,GALL,EAMKjB,CAAD,IAAc;AACZW,IAAAA,QAAQ,CAAEX,CAAF,CAAR;AACD,GARL;AAUD;;AACM,SAASoB,UAAT,CACLhB,QADK,EAELC,IAFK,EAGLC,UAHK,EAILC,MAJK,EAKLG,MALK,EAMG;AACR,QAAMI,iBAAiB,GAAGjB,aAAa,CAACO,QAAD,EAAWT,UAAX,CAAvC;AACA,QAAMoB,aAAa,GAAGlB,aAAa,CAACQ,IAAD,EAAOT,SAAP,CAAnC;AAEA,QAAMyB,IAAI,GAAGX,MAAM,GAAGA,MAAH,GAAY,MAA/B;AACA,MAAIY,MAAmB,GAAGrB,YAAY,CAACmB,UAAb,CACxBN,iBADwB,EAExBC,aAFwB,EAGxBT,UAHwB,EAIxBC,MAJwB,EAKxBc,IALwB,CAA1B;AAQA,SAAOH,0BAAOC,IAAP,CAAYG,MAAZ,CAAP;AACD","sourcesContent":["import { NativeQuickCrypto } from './NativeQuickCrypto/NativeQuickCrypto';\nimport { Buffer } from '@craftzdog/react-native-buffer';\nimport { BinaryLike, binaryLikeToArrayBuffer } from './Utils';\n\nconst WRONG_PASS =\n  'Password must be a string, a Buffer, a typed array or a DataView';\nconst WRON_SALT = `Salt must be a string, a Buffer, a typed array or a DataView`;\n\ntype Password = BinaryLike;\ntype Salt = BinaryLike;\ntype Pbkdf2Callback = (err: Error | null, derivedKey?: Buffer) => void;\n\nfunction sanitizeInput(input: BinaryLike, errorMsg: string): ArrayBuffer {\n  try {\n    return binaryLikeToArrayBuffer(input);\n  } catch (e: any) {\n    throw errorMsg;\n  }\n}\n\nconst nativePbkdf2 = NativeQuickCrypto.pbkdf2;\n\nexport function pbkdf2(\n  password: Password,\n  salt: Salt,\n  iterations: number,\n  keylen: number,\n  digest: string,\n  callback: Pbkdf2Callback\n): void;\nexport function pbkdf2(\n  password: Password,\n  salt: Salt,\n  iterations: number,\n  keylen: number,\n  callback: Pbkdf2Callback\n): void;\nexport function pbkdf2(\n  password: Password,\n  salt: Salt,\n  iterations: number,\n  keylen: number,\n  arg0?: unknown,\n  arg1?: unknown\n): void {\n  let digest = 'sha1';\n  let callback: undefined | Pbkdf2Callback;\n  if (typeof arg0 === 'string') {\n    digest = arg0;\n    if (typeof arg1 === 'function') {\n      callback = arg1 as Pbkdf2Callback;\n    }\n  } else {\n    if (typeof arg0 === 'function') {\n      callback = arg0 as Pbkdf2Callback;\n    }\n  }\n  if (callback === undefined) {\n    throw new Error('No callback provided to pbkdf2');\n  }\n\n  const sanitizedPassword = sanitizeInput(password, WRONG_PASS);\n  const sanitizedSalt = sanitizeInput(salt, WRON_SALT);\n\n  nativePbkdf2\n    .pbkdf2(sanitizedPassword, sanitizedSalt, iterations, keylen, digest)\n    .then(\n      (res: ArrayBuffer) => {\n        callback!(null, Buffer.from(res));\n      },\n      (e: Error) => {\n        callback!(e);\n      }\n    );\n}\nexport function pbkdf2Sync(\n  password: Password,\n  salt: Salt,\n  iterations: number,\n  keylen: number,\n  digest?: string\n): Buffer {\n  const sanitizedPassword = sanitizeInput(password, WRONG_PASS);\n  const sanitizedSalt = sanitizeInput(salt, WRON_SALT);\n\n  const algo = digest ? digest : 'sha1';\n  let result: ArrayBuffer = nativePbkdf2.pbkdf2Sync(\n    sanitizedPassword,\n    sanitizedSalt,\n    iterations,\n    keylen,\n    algo\n  );\n\n  return Buffer.from(result);\n}\n"]}