{"version":3,"sources":["random.ts"],"names":["NativeQuickCrypto","Buffer","random","randomFill","buffer","Error","callback","offset","size","byteLength","isBuffer","then","e","randomFillSync","randomBytes","buf","undefined","error","rng","pseudoRandomBytes","prng","RAND_MAX","randomCache","randomCacheOffset","length","asyncCacheFillInProgress","asyncCachePendingTasks","randomInt","arg1","arg2","max","min","minNotSpecified","isSync","Number","isSafeInteger","range","randLimit","x","readUIntBE","n","process","nextTick","push","asyncRefillRandomIntCache","err","tasks","errorReceiver","shift","splice","forEach","task","getRandomValues","data","byteToHex","i","toString","slice","randomUUID","toLowerCase"],"mappings":"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","sourcesContent":["import { NativeQuickCrypto } from './NativeQuickCrypto/NativeQuickCrypto';\nimport { Buffer } from '@craftzdog/react-native-buffer';\n\nconst random = NativeQuickCrypto.random;\n\ntype TypedArray =\n  | Uint8Array\n  | Uint8ClampedArray\n  | Uint16Array\n  | Uint32Array\n  | Int8Array\n  | Int16Array\n  | Int32Array\n  | Float32Array\n  | Float64Array;\ntype ArrayBufferView = TypedArray | DataView | ArrayBufferLike | Buffer;\n\nexport function randomFill<T extends ArrayBufferView>(\n  buffer: T,\n  callback: (err: Error | null, buf: T) => void\n): void;\n\nexport function randomFill<T extends ArrayBufferView>(\n  buffer: T,\n  offset: number,\n  callback: (err: Error | null, buf: T) => void\n): void;\n\nexport function randomFill<T extends ArrayBufferView>(\n  buffer: T,\n  offset: number,\n  size: number,\n  callback: (err: Error | null, buf: T) => void\n): void;\n\nexport function randomFill(buffer: any, ...rest: any[]): void {\n  if (typeof rest[rest.length - 1] !== 'function') {\n    throw new Error('No callback provided to randomDill');\n  }\n\n  const callback = rest[rest.length - 1] as any as (\n    err: Error | null,\n    buf?: ArrayBuffer\n  ) => void;\n\n  let offset: number = 0;\n  let size: number = buffer.byteLength;\n\n  if (typeof rest[2] === 'function') {\n    offset = rest[0];\n    size = rest[1];\n  }\n\n  if (typeof rest[1] === 'function') {\n    offset = rest[0];\n  }\n\n  random\n    .randomFill(Buffer.isBuffer(buffer) ? buffer.buffer : buffer, offset, size)\n    .then(\n      () => {\n        callback(null, buffer);\n      },\n      (e: Error) => {\n        callback(e);\n      }\n    );\n}\n\nexport function randomFillSync<T extends ArrayBufferView>(\n  buffer: T,\n  offset?: number,\n  size?: number\n): T;\n\nexport function randomFillSync(buffer: any, offset: number = 0, size?: number) {\n  random.randomFillSync(\n    buffer.buffer ? buffer.buffer : buffer,\n    offset,\n    size ?? buffer.byteLength\n  );\n  return buffer;\n}\n\nexport function randomBytes(size: number): ArrayBuffer;\n\nexport function randomBytes(\n  size: number,\n  callback: (err: Error | null, buf?: ArrayBuffer) => void\n): void;\n\nexport function randomBytes(\n  size: number,\n  callback?: (err: Error | null, buf?: ArrayBuffer) => void\n): void | ArrayBuffer {\n  const buf = new Buffer(size);\n\n  if (callback === undefined) {\n    randomFillSync(buf.buffer, 0, size);\n    return buf;\n  }\n\n  randomFill(buf.buffer, 0, size, (error: Error | null) => {\n    if (error) {\n      callback(error);\n    }\n    callback(null, buf);\n  });\n}\n\nexport const rng = randomBytes;\nexport const pseudoRandomBytes = randomBytes;\nexport const prng = randomBytes;\n\ntype RandomIntCallback = (err: Error | null, value: number) => void;\ntype Task = {\n  min: number;\n  max: number;\n  callback: RandomIntCallback;\n};\n\n// The rest of the file is taken from https://github.com/nodejs/node/blob/master/lib/internal/crypto/random.js\n\n// Largest integer we can read from a buffer.\n// e.g.: Buffer.from(\"ff\".repeat(6), \"hex\").readUIntBE(0, 6);\nconst RAND_MAX = 0xffffffffffff;\n\n// Cache random data to use in randomInt. The cache size must be evenly\n// divisible by 6 because each attempt to obtain a random int uses 6 bytes.\nconst randomCache = new Buffer(6 * 1024);\nlet randomCacheOffset = randomCache.length;\nlet asyncCacheFillInProgress = false;\nconst asyncCachePendingTasks: Task[] = [];\n\n// Generates an integer in [min, max) range where min is inclusive and max is\n// exclusive.\n\nexport function randomInt(max: number, callback: RandomIntCallback): void;\nexport function randomInt(max: number): number;\nexport function randomInt(\n  min: number,\n  max: number,\n  callback: RandomIntCallback\n): void;\nexport function randomInt(min: number, max: number): number;\nexport function randomInt(\n  arg1: number,\n  arg2?: number | RandomIntCallback,\n  callback?: RandomIntCallback\n): void | number {\n  // Detect optional min syntax\n  // randomInt(max)\n  // randomInt(max, callback)\n  let max: number;\n  let min: number;\n  const minNotSpecified =\n    typeof arg2 === 'undefined' || typeof arg2 === 'function';\n\n  if (minNotSpecified) {\n    callback = arg2 as any as undefined | RandomIntCallback;\n    max = arg1;\n    min = 0;\n  } else {\n    min = arg1;\n    max = arg2 as any as number;\n  }\n\n  const isSync = typeof callback === 'undefined';\n  if (!Number.isSafeInteger(min)) {\n    // todo throw new ERR_INVALID_ARG_TYPE('min', 'a safe integer', min);\n    throw 'ERR_INVALID_ARG_TYPE';\n  }\n  if (!Number.isSafeInteger(max)) {\n    // todo throw new ERR_INVALID_ARG_TYPE('max', 'a safe integer', max);\n    throw 'ERR_INVALID_ARG_TYPE';\n  }\n  if (max <= min) {\n    /* todo throw new ERR_OUT_OF_RANGE(\n      'max',\n      `greater than the value of \"min\" (${min})`,\n      max\n    );*/\n    throw 'ERR_OUT_OF_RANGE';\n  }\n\n  // First we generate a random int between [0..range)\n  const range = max - min;\n\n  if (!(range <= RAND_MAX)) {\n    /* todo throw new ERR_OUT_OF_RANGE(\n      `max${minNotSpecified ? '' : ' - min'}`,\n      `<= ${RAND_MAX}`,\n      range\n    );*/\n    throw 'ERR_OUT_OF_RANGE';\n  }\n\n  // For (x % range) to produce an unbiased value greater than or equal to 0 and\n  // less than range, x must be drawn randomly from the set of integers greater\n  // than or equal to 0 and less than randLimit.\n  const randLimit = RAND_MAX - (RAND_MAX % range);\n\n  // If we don't have a callback, or if there is still data in the cache, we can\n  // do this synchronously, which is super fast.\n  while (isSync || randomCacheOffset < randomCache.length) {\n    if (randomCacheOffset === randomCache.length) {\n      // This might block the thread for a bit, but we are in sync mode.\n      randomFillSync(randomCache);\n      randomCacheOffset = 0;\n    }\n\n    const x = randomCache.readUIntBE(randomCacheOffset, 6);\n    randomCacheOffset += 6;\n\n    if (x < randLimit) {\n      const n = (x % range) + min;\n      if (isSync) return n;\n      process.nextTick(callback as Function, undefined, n);\n      return;\n    }\n  }\n\n  // At this point, we are in async mode with no data in the cache. We cannot\n  // simply refill the cache, because another async call to randomInt might\n  // already be doing that. Instead, queue this call for when the cache has\n  // been refilled.\n  if (callback !== undefined) {\n    // it is (typescript doesn't know it)\n    asyncCachePendingTasks.push({ min, max, callback });\n    asyncRefillRandomIntCache();\n  }\n}\n\nfunction asyncRefillRandomIntCache() {\n  if (asyncCacheFillInProgress) return;\n\n  asyncCacheFillInProgress = true;\n  randomFill(randomCache, (err) => {\n    asyncCacheFillInProgress = false;\n\n    const tasks = asyncCachePendingTasks;\n    const errorReceiver = err && tasks.shift();\n    if (!err) randomCacheOffset = 0;\n\n    // Restart all pending tasks. If an error occurred, we only notify a single\n    // callback (errorReceiver) about it. This way, every async call to\n    // randomInt has a chance of being successful, and it avoids complex\n    // exception handling here.\n    tasks.splice(0).forEach((task) => {\n      randomInt(task.min, task.max, task.callback);\n    });\n\n    // This is the only call that might throw, and is therefore done at the end.\n    if (errorReceiver) errorReceiver.callback(err, 0);\n  });\n}\n\n// Really just the Web Crypto API alternative\n// to require('crypto').randomFillSync() with an\n// additional limitation that the input buffer is\n// not allowed to exceed 65536 bytes, and can only\n// be an integer-type TypedArray.\ntype DataType =\n  | Int8Array\n  | Int16Array\n  | Int32Array\n  | Uint8Array\n  | Uint16Array\n  | Uint32Array;\nexport function getRandomValues(data: DataType) {\n  if (data.byteLength > 65536) {\n    throw new Error('The requested length exceeds 65,536 bytes');\n  }\n  randomFillSync(data, 0);\n  return data;\n}\n\nconst byteToHex: string[] = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\n// Based on https://github.com/uuidjs/uuid/blob/main/src/v4.js\nexport function randomUUID() {\n  const size = 16;\n  const buffer = new Buffer(size);\n  randomFillSync(buffer, 0, size);\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  buffer[6] = (buffer[6] & 0x0f) | 0x40;\n  buffer[8] = (buffer[8] & 0x3f) | 0x80;\n\n  return (\n    byteToHex[buffer[0]] +\n    byteToHex[buffer[1]] +\n    byteToHex[buffer[2]] +\n    byteToHex[buffer[3]] +\n    '-' +\n    byteToHex[buffer[4]] +\n    byteToHex[buffer[5]] +\n    '-' +\n    byteToHex[buffer[6]] +\n    byteToHex[buffer[7]] +\n    '-' +\n    byteToHex[buffer[8]] +\n    byteToHex[buffer[9]] +\n    '-' +\n    byteToHex[buffer[10]] +\n    byteToHex[buffer[11]] +\n    byteToHex[buffer[12]] +\n    byteToHex[buffer[13]] +\n    byteToHex[buffer[14]] +\n    byteToHex[buffer[15]]\n  ).toLowerCase();\n}\n"]}